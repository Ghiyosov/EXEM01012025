// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoMAin.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("MembershipStatus")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("CK_Client_DateOfBirth", "\"DateOfBirth\" >= CURRENT_DATE - INTERVAL '16 years'");
                        });
                });

            modelBuilder.Entity("DoMAin.Entities.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainerId"));

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers", t =>
                        {
                            t.HasCheckConstraint("CK_Trainer_Experience", "\"Experience\" > 0 and \"Experience\" < 100");
                        });
                });

            modelBuilder.Entity("DoMAin.Entities.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WorkoutId");

                    b.ToTable("Workouts", t =>
                        {
                            t.HasCheckConstraint("CK_Workout_MaxParticipants", "\"MaxParticipants\" > 0");
                        });
                });

            modelBuilder.Entity("DoMAin.Entities.WorkoutSession", b =>
                {
                    b.Property<int>("WorkoutSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutSessionId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeComment")
                        .HasMaxLength(200)
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("WorkoutSessionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutSessions", t =>
                        {
                            t.HasCheckConstraint("CK_Workout_EndTime", "\"EndTime\" >= '07:00:00' and \"EndTime\" <= '23:00:00'");

                            t.HasCheckConstraint("CK_Workout_StartTime", "\"StartTime\" >= '07:00:00' and \"StartTime\" <= '23:00:00'");
                        });
                });

            modelBuilder.Entity("DoMAin.Entities.WorkoutSession", b =>
                {
                    b.HasOne("DoMAin.Entities.Client", "Client")
                        .WithMany("WorkoutSession")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoMAin.Entities.Trainer", "Trainer")
                        .WithMany("WorkoutSession")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoMAin.Entities.Workout", "Workout")
                        .WithMany("WorkoutSession")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Trainer");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("DoMAin.Entities.Client", b =>
                {
                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("DoMAin.Entities.Trainer", b =>
                {
                    b.Navigation("WorkoutSession");
                });

            modelBuilder.Entity("DoMAin.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutSession");
                });
#pragma warning restore 612, 618
        }
    }
}
